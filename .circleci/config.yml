version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>

parameters:
  circleci_image:
    type: string
    default: circleci/node:13.8.0
  amazon_image:
    type: string
    default: amazon/aws-cli
  stretch_image:
    type: string
    default: python:3.7.3-stretch

jobs:
  test-application:
    docker:
      - image: << pipeline.parameters.stretch_image >>
   
    steps:
      - checkout
      # Download and cache dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
    
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile
            pylint --disable=R,C,W1203,W1309 ./techtrends/app.py

  deploy-infrastructure:
    docker: 
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: Deploy infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=devops-capstone \
              --stack-name "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
    
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible/
            rm ./inventory.txt
            BACKEND_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:project,Values=udapeople-backend' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo "[web]" >> ./inventory.txt
            echo ${BACKEND_DNS} >> ./inventory.txt
            cat ./inventory.txt
            yum install -y tar gzip
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${BACKEND_DNS} \
               https://api.memstash.io/values/backend_dns
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: << pipeline.parameters.stretch_image >>
    steps:
      - checkout
      - add_ssh_keys:  # Add ssh keys with fingerprint
          fingerprints: ["ce:24:79:a5:05:46:f6:26:36:b5:61:e5:e9:11:25:4e"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i ./inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-application:
    docker:
      - image: << pipeline.parameters.stretch_image >> # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:  # Add ssh keys with fingerprint
          fingerprints: ["ce:24:79:a5:05:46:f6:26:36:b5:61:e5:e9:11:25:4e"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible tar gzip
            apk add --update zip unzip rsync openssh
      - run:
          name: Configure
          command: |
            tar -czvf kubernetes.tar.gz ./kubernetes
            tar -czvf techtrends.tar.gz ./techtrends
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv kubernetes.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            mv techtrends.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            mv Dockerfile ~/project/.circleci/ansible/roles/deploy/files/
            pwd
            cd /root/project/.circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False
            ansible-playbook -i ./inventory.txt deploy-backend.yml     
      # Here's where you will add some code to rollback on failure ## 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
        

workflows:
  default:
    jobs:
      - test-application
      - deploy-infrastructure:
          requires: [test-application]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-application:
          requires: [configure-infrastructure]
      #- smoke-test:
      #    requires: [deploy-application]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]
