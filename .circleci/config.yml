version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name devops-capstone-<< parameters.workflow_id >>

parameters:
  circleci_image:
    type: string
    default: circleci/node:13.8.0
  amazon_image:
    type: string
    default: amazon/aws-cli
  stretch_image:
    type: string
    default: python:3.7.3-stretch

jobs:
  lint-application:
    docker:
      - image: << pipeline.parameters.stretch_image >>
   
    steps:
      - checkout
      # Download and cache dependencies
      - run:
          name: install dependencies
          command: |
            make setup
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
    
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  deploy-cluster:
    docker: 
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum install -y ansible tar gzip openssl
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    
      - run:
          name: Create Cluster yaml
          command: |
            cd .circleci/
            ls -al
            eksctl create cluster -f cluster.yml
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-infrastructure:
    docker: 
    - image: << pipeline.parameters.amazon_image >>
    steps:
      - checkout
      - run:
          name: Deploy infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=devops-capstone \
              --stack-name "devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible/
            rm ./inventory.txt
            BACKEND_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:project,Values=devops-capstone' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo "[web]" >> ./inventory.txt
            echo ${BACKEND_DNS} >> ./inventory.txt
            cat ./inventory.txt
            yum install -y tar gzip
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${BACKEND_DNS} \
               https://api.memstash.io/values/backend_dns
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:  # Add ssh keys with fingerprint
          fingerprints: ["e4:a7:83:e4:09:f8:76:7d:29:09:86:3b:ba:4a:ac:39"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False
            ansible-playbook -i ./inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  deploy-application:
    docker:
      - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:  # Add ssh keys with fingerprint
          fingerprints: ["e4:a7:83:e4:09:f8:76:7d:29:09:86:3b:ba:4a:ac:39"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible tar gzip
            apk add --update zip unzip rsync openssh
      - run:
          name: Configure
          command: |
            tar -czvf kubernetes.tar.gz ./kubernetes
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv kubernetes.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            pwd
            cd /root/project/.circleci/ansible/
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False
            ansible-playbook -i ./inventory.txt deploy-backend.yml     
      # Here's where you will add some code to rollback on failure ## 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}         

workflows:
  default:
    jobs:
      - lint-application
      - deploy-cluster:
          requires: [lint-application]
      #- deploy-infrastructure:
      #    requires: [lint-application]
      #    filters:
      #      branches:
      #        only: [main]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- deploy-application:
      #    requires: [configure-infrastructure]
      #- smoke-test:
      #    requires: [deploy-application]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]
